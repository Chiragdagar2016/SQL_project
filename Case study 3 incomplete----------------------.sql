-- 1. Display the number of states present in the Location Table.

select count(state) as 'No of states' from Location

--2.How many products are of regular type?

select count(type) as 'Count of regular type'  from Product
where Type = 'regular';

-- 3. How much spending has been done on marketing of product ID 1?

select sum(marketing) 'Spending on marketing' from Fact
where productid=1;

--4. What is the minimum sales of a product?

select productid, min(sales) as 'Min sales of product' from Fact
Group by productid
order by productid;

-- 5. Display the max Cost of Good Sold (COGS).

select productid, max(cogs) as 'max Cost of Good Sold' from Fact
Group by productid
order by productid;

-- 6. Display the details of the product where product type is coffee.

select * from Product
where product_type = 'coffee';

-- 7. Display the details where total expenses are greater than 40.

select * from Fact
where total_expenses>40
order by total_expenses Desc;

--8. What is the average sales in area code 719?

select Area_code, Avg(sales) 'Avg Sales' from Fact
Group by Area_code
Having Area_code=719;

-- 9. Find out the total profit generated by Colorado state.

select Sum(F.profit) as 'Total profit' from Fact as F
join Location as L
on F.Area_code=L.Area_code 
where state='Colorado';

--10. Display the average inventory for each product ID.

select productid, Avg(inventory) 'Avg inventory' from Fact
Group by productid
Order by productid;

--11. Display state in a sequential order in a LocationTable.

select state from Location
order by state Asc;

--12. Display the average budget of the Product where the average budget margin should be greater than 100.

select productid, Avg(Budget_profit), Avg(Budget_cogs), Avg(budget_sales) from Fact
where Budget_margin>100
Group by productid
Order by productid;

--13.  What is the total sales done on date 2010-01-01?

select sum(sales) as'Total sales' from Fact
where date= '2010-01-01';

--14.  Display the average total expense of each product ID on an individual date.

select productid, Avg(total_expenses) as  'Avg Expense' from fact 
where date='2010-01-01'
Group by productid;

--15.  Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, 
--area_code.

select F.date, F.productID, P.product_type, p.product, F.sales, F.profit, l.state, l.area_code from  Fact F
Join Product p
on F.productID=p.productID
join Location L
on F.area_code=L.area_code

--16.  Display the rank without any gap to show the sales wiserank.

select productid, sales, 
Dense_rank() over(order by sales Desc) as 'Rank'
from fact


--17.  Find the state wise profit and sales.

select sum(F.profit) as 'Total profit', sum(F.sales) as 'Total sales', L.state from fact as F
Join Location as L
on F.area_code=L.area_code
Group by state;

--18. Find the state wise profit and sales along with the productname.
  
select sum(F.profit) as 'Total profit', sum(F.sales) as 'Total sales', L.state, P.PRODUCT from fact as F
Join Location as L
on F.area_code=L.area_code
join Product as P
on F.productid=p.productid
Group by P.PRODUCT, L.state

--19.  If there is an increase in sales of 5%, calculate the increased sales.

Create function Inc_sales(@productid int, @sales Int)
Returns Decimal
as 
Begin 
	Declare @Inc_sales Decimal
	set @Inc_sales= @sales+(@sales *5/100)
	Return @Inc_sales
End;

select productid, dbo.Inc_sales(productid, sales) as 'Increased sales' from Fact

--20. Find the maximum profit along with the product ID and producttype.

select Max(F.profit) as 'Max profit', F.productID, P.product_type from fact as F
Join Product as P
on F.productID=P.productID
Group by F.productID, product_type;

--21. Create a stored procedure to fetch the result according to the product type from ProductTable.

Create procedure Fetching(@product Varchar(200))
as 
Begin 
Declare @product_type varchar(100)
	select * from Product
	where product_type= @product
End;

Exec Fetching @product='Tea'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

select total_expenses,
	case 
		when total_expenses<60 then 'Profit'
	Else 'Loss'
	End as Status
from Fact

--23. Give the total weekly sales value with the date and product IDdetails. Use roll-up to pull the data in hierarchical order.

SELECT DATEPART(WEEK,F.Sales) AS WeekNumber,
	  F.Sales,P.Product_Type,P.Product,P.ProductID,SUM(F.Budget_Sales) AS TotalSales
FROM fact F
INNER JOIN Product P ON F.ProductId=P.ProductId
GROUP BY ROLLUP(DATEPART(WEEK,F.Sales),F.Sales,P.Product_Type,P.Product,P.ProductId)
ORDER BY WeekNumber,F.Sales,P.ProductId

--24.Apply union and intersection operator on the tables which consist of attribute area code.

SELECT Area_Code FROM fact  
UNION  
SELECT Area_Code FROM Location
  
SELECT Area_Code FROM fact  
INTERSECT  
SELECT Area_Code FROM Location

--25. Create a user-defined function for the product table to fetch aparticular product type based upon the user’s preference.

Create function preference(@product_type Varchar(100))
Returns Table
as 
Return
(
	select ProductId,product, product_type from Product
	where product_type= @product_type
);

select * from dbo.preference('Tea')

--26.Change the product type from coffee to tea where product ID is 1 and undo it.

Begin transaction 
 Update Product
 set product_type= 'Tea'
 where productID= 1;

 Rollback transaction;

 --27. Display the date, product ID and sales where total expenses are between 100 to 200.

select Date, productID, sales, total_expenses from Fact
where total_expenses between 100 and 200

--28. Delete the records in the Product Table for regular type.

Delete from Product
where type = 'regular';

--29. Display the ASCII value of the fifth character from the columnProduct.

SELECT Product, ASCII(SUBSTRING(Product, 5, 1)) AS FifthCharASCII  
FROM Product;